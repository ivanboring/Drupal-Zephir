[ { "type": "comment", "value": "*public final function drupal_static(string name, var default_value = null, boolean reset = false) {\n        \/\/let self::drupal_static_data = [];\n        \/\/let self::drupal_static_default = [];\n        var newname;\n        var value;\n        array returnarray = [];\n        \n        if isset this->drupal_static_data[name] || array_key_exists(name, this->drupal_static_data) {\n            if reset {\n                let this->drupal_static_data[name] = this->drupal_static_default[name];\n            }\n            let returnarray[\"value\"] = this->drupal_static_data[name];\n            let returnarray[\"byname\"] = true;\n            return returnarray;\n        }\n\n        if name {\n            if reset {\n                let returnarray[\"value\"] = this->drupal_static_data;\n                let returnarray[\"byname\"] = false;\n                return returnarray;\n            }\n            let this->drupal_static_data[name] = default_value;\n            let this->drupal_static_default[name] = default_value;\n            let returnarray[\"value\"] = this->drupal_static_data[name];\n            let returnarray[\"byname\"] = true;\n            return returnarray;\n        }\n\n        for newname, value in this->drupal_static_default {\n            let this->drupal_static_data[newname] = value;\n        }\n\n        let returnarray[\"value\"] = this->drupal_static_data;\n        let returnarray[\"byname\"] = false;\n        return returnarray;\n    }\n\n    public static final function theme(var hook, var variables = [], var issethooks, var hooks, var theme_path, string theme_engine) {\n        var returnarray = [];\n        string theme_hook_original, output, render_function, extension;\n        var candidate, pos, info, temp, include_file, element, name, base_hook, base_hook_info, phase, processor_function, suggestions;\n        var suggestion;\n        boolean ran = false;\n\n        if is_array(hook) {\n            for candidate in hook {\n                let ran = true;\n                if isset hooks[candidate] {\n                    break;\n                }\n            }\n            let hook = candidate;\n        }\n        let theme_hook_original = \"\" . hook;\n\n        if !issethooks {\n            echo hook . \"\\n\";\n            while(true) {\n                let pos = strrpos(hook, '__');\n                let hook = substr(hook, 0, pos);\n                if isset hooks[hook] {\n                    break;\n                }\n                if (int) pos == 0 {\n                    break;\n                }\n            }\n\n            if !isset hooks[hook] {\n                if ran {\n                    let returnarray[\"error\"] = true;\n                }\n                let returnarray[\"answer\"] = \"\";\n                return returnarray;\n            }\n        }\n\n        let info = issethooks;\n        let temp = theme_path;\n\n        let theme_path = info[\"theme path\"];\n\n        if isset info[\"includes\"] {\n            for include_file in info[\"includes\"] {\n                let returnarray[\"include_files\"][] = include_file;\n            }\n        }\n\n        if isset variables[\"#theme\"] || isset variables[\"#theme_wrappers\"] {\n            let element = variables;\n            let variables = [];\n            if isset info[\"variables\"] {\n                for name in array_keys(info[\"variables\"]) {\n                    if isset element[\"#name\"] {\n                        let variables[name] = element[\"#\" . name];\n                    }\n                }                \n            }\n            else {\n                let variables[info[\"render element\"]] = element;\n            }\n        }\n\n        if isset info[\"variables\"] {\n            let variables += info[\"variables\"];\n        }\n        elseif isset info[\"render element\"] {\n            let variables[info[\"render element\"]] = [];\n        }\n\n        let variables[\"theme_hook_original\"] = theme_hook_original;        \n\n        if isset info[\"base hook\"] {\n            let base_hook = info[\"base hook\"];\n            let base_hook_info = hook[base_hook];\n\n            if isset base_hook_info[\"includes\"] {\n                for include_file in base_hook_info[\"includes\"] {\n                    let returnarray[\"include_files\"][] = include_file;\n                } \n            }\n\n            if isset base_hook_info[\"preprocess functions\"] || isset(base_hook_info[\"process functions\"]) {\n                let variables[\"theme_hook_suggestions\"] = hook;\n                let hook = base_hook;\n                let info = base_hook_info;\n            }\n        }\n\n        if isset info[\"preprocess functions\"] || isset info[\"process functions\"] {\n            let variables[\"theme_hook_suggestions\"] = [];\n            for phase in [\"preprocess functions\", \"process functions\"] {\n                if isset info[phase] {\n                    for processor_function in info[phase] {\n                        let returnarray[\"process\"][0][] = [\"hook_clone\": hook, \"variables\": variables, \"processor_function\": processor_function];\n                    }\n                }\n            }\n        }\n\n        let suggestions = [];\n        if isset variables[\"theme_hook_suggestions\"] {\n            let suggestions = variables[\"theme_hook_suggestions\"];\n        }\n        if isset variables[\"theme_hook_suggestion\"] {\n            let suggestions[] = variables[\"theme_hook_suggestion\"];\n        }\n        for suggestion in array_reverse(suggestions) {\n            if isset hooks[suggestion] {\n                let info = hooks[suggestion];\n                break;\n            }\n        }\n\n        let output = \"\";\n        if isset info[\"function\"] {\n            let returnarray[\"process\"][1][] = [\"variables\": variables, \"processor_function\": info[\"function\"]];\n        }\n        else {\n            let render_function = \"theme_render_template\";\n            let extension = \".tpl.php\";\n\n            if theme_engine {\n                if info[\"type\"] != \"module\" {\n                    let returnarray[\"render_function\"] = theme_engine . \"_render_template\";\n                }\n                let returnarray[\"extension_function\"] = theme_engine . \"_extension\";\n            }\n        }\n        let returnarray[\"variables\"] = variables;\n        let returnarray[\"temp\"] = temp;\n        let returnarray[\"info\"] = info;\n        return returnarray;\n    }*", "file": "\/var\/extensions\/drupal\/drupal\/temp.zep", "line": 175, "char": 6 } ]
